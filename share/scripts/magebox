#!/usr/bin/env bash

 #Uncomment below for debugging setup issues
 #set -x

IMPORT_PATH="/home/vagrant/share"

#################################
## IMPORT ENVIROMENT VARIABLES ##
#################################

. "$IMPORT_PATH"/scripts/env

############
## COLORS ##
############

black() { echo "$(tput setaf 0)$*$(tput setaf 9)"; }
red() { echo "$(tput setaf 1)$*$(tput setaf 9)"; }
green() { echo "$(tput setaf 2)$*$(tput setaf 9)"; }
yellow() { echo "$(tput setaf 3)$*$(tput setaf 9)"; }
blue() { echo "$(tput setaf 4)$*$(tput setaf 9)"; }
magenta() { echo "$(tput setaf 5)$*$(tput setaf 9)"; }
cyan() { echo "$(tput setaf 6)$*$(tput setaf 9)"; }
white() { echo "$(tput setaf 7)$*$(tput setaf 9)"; }

r=$(tput setaf 1)
g=$(tput setaf 2)
b=$(tput setaf 4)
w=$(tput setaf 7)

###############
## FUNCTIONS ##
###############

Usage () {
cat << EOF
$w
Usage: $b magebox [command] [-d] $w

$g GENERAL $w
$b magebox bootstrap $w      Install all required software (PHP, Apache/Nginx, Mysql, etc..)
$b magebox help $w           Shows commands avaliable
$b magebox enviroment $w     Shows current enviroment variables

$g MAGENTO2 INSTALL $w
magebox install              Install Magento2 based on enviroment settings
magebox install:git          Install Magento2 with git
magebox install:composer     Install Magento2 with Composer
magebox install:sample       Install magento sample data with composer

$g DATABASE $w
magebox database:install     Install database from config settings

$g PHP SERVER $w
magebox php:install          Install PHP server from config settings

$g WEB SERVER $w
magebox web:install          Install web server from config settings

$g SSL $w
magebox ssl:disable          Diables SSL in the database
magebox ssl:enable           Enables SSL in database

$g RESTORE $w
magebox restore:database     Restore database from the restore/db folder will choose latest if multiples
magebox restore:media        Restore media from the restore/media folder will choose latest if multiples

$g MODE $w
magebox mode:developer 		 set magento to developer mode
magebox mode:production 	 set magento to production mode

EOF
}

Logo () {
echo $(tput setaf 5)
cat << "EOF"
                             ___.
  _____ _____     ____   ____\_ |__   _______  ___
 /     \\__  \   / ___\_/ __ \| __ \ /  _ \  \/  /
|  Y Y  \/ __ \_/ /_/  >  ___/| \_\ (  <_> >    <
|__|_|  (____  /\___  / \___  >___  /\____/__/\_ \
      \/     \//_____/      \/    \/            \/

EOF
echo $(tput setaf 9)
}

ServerUpdate () {
	green '- Updating server now'
	# Update the system
	sudo apt-get -y update
	sudo apt-get -y upgrade
	# Install basics
	sudo apt-get -y install software-properties-common curl nano vim git zip
}

AddUsers () {
	green 'Adding User: ' $USER_NAME ' To Group: ' $USER_GROUP
	sudo useradd -g $USER_NAME $USER_GROUP
	sudo usermod -g $USER_GROUP $USER_NAME
}

# Database Functions
Database () {
green 'Installing Database Software: ' $1
if [ "$1" == 'mysql' ]
    then
    # Install MySQL 5.6
    export DEBIAN_FRONTEND=noninteractive
	sudo apt-get install mysql-client-5.6
	sudo -E apt-get -q -y install mysql-server-5.6
elif [ "$1" == 'percona' ]
    then
    wget https://repo.percona.com/apt/percona-release_0.1-3.$(lsb_release -sc)_all.deb
    dpkg -i percona-release_0.1-3.$(lsb_release -sc)_all.deb
    sudo apt-get update
    sudo apt-get install -y percona-server-server-5.6
elif [ "$1" == 'mariadb' ]
    then
    sudo apt-get install -y mariadb-server
elif [ -z "$1" ]
    then
	red "[x] FATAL ERROR: No database software selected"
	exit 1
else
	red "[x] FATAL ERROR: Invalid database software selected (valid choices: mysql, percona & mariadb) - $1"
	exit 1
fi
}

CreateDB () {
	green 'Creating Database: ' $DATABASE_NAME ' With User: ' $DATABASE_USER
	Q1="CREATE DATABASE IF NOT EXISTS $DATABASE_NAME;"
	Q2="GRANT ALL ON "$DATABASE_NAME".* TO '$DATABASE_USER'@'localhost' IDENTIFIED BY '$DATABASE_PASS';"
	Q3="FLUSH PRIVILEGES;"
	SQL="$Q1 $Q2 $Q3"
	mysql -u root -e "$SQL"
}

# PHP Functions
PHPServer () {
	green 'Installing PHP Version: ' $1
	if [ "$1" == "5" ]
	then
		# Install PHP 5.6 FPM
		sudo add-apt-repository ppa:ondrej/php
		sudo apt-get install python-software-properties
		sudo apt-get update && sudo apt-get -y upgrade
		sudo apt-get -y install php5.6-fpm php5.6-cli php5.6-gd php-imagick php5.6-mysql php5.6-mcrypt php-pear php5.6-curl php5.6-intl php5.6-gd php5.6-xsl php5.6-mbstring php5.6-mcrypt php5.6-zip

		#php.ini settings - memory
		phpmemory_limit=1024M
		PHP_TIME=$timezone
		sudo sed -i 's/memory_limit = .*/memory_limit = '${phpmemory_limit}'/' /etc/php/5.6/cli/php.ini

		#php.in settings - always_populate_raw_post_data
		sudo sed -i 's/always_populate_raw_post_data = /always_populate_raw_post_data = -1/' /etc/php/5.6/cli/php.ini

		#php.ini settings - time
		sudo bash -c "cat /etc/php/5.6/cli/php.ini >> $PHP_TIME"

		zend_extension="/usr/local/php/modules/xdebug.so"

		#copy CLi php.ini to FPM
		sudo cp /etc/php/5.6/cli/php.ini /etc/php/5.6/fpm/php.ini

		# PHP Mcrypt
		sudo ln -s /etc/php/5.6/conf.d/mcrypt.ini /etc/php/5.6/mods-available/mcrypt.ini
		sudo php5enmod mcrypt
		sudo service php5.6-fpm restart


	elif [ "$1" == "7" ]
		then
		#TODO: add/test PHP7
		echo "PHP7 not avaliable yet"
	elif [ -z "$1" ]
    	then
		echo "[x] FATAL ERROR: No PHP server selected" > $ERR_LOG
		exit 1
	else
		echo "[x] FATAL ERROR: Invalid PHP server selected (valid choices: 5 or 6) - you have selected "$1"" > $ERR_LOG
		exit 1
	fi
}

# Web Server Functions

WebServer () {
	green 'Installing Web Server: ' $1
	if [ "$1" = "nginx" ]
	then
		sudo apt-get -y install nginx
		#Remove existing configs
		file2="/etc/nginx/sites-enabled/m2"
		 if [ -e "$file2" ]
		 	then
		 	sudo rm -f $file2
		 	echo "Deleteing the file now"
		 fi
		file1="/etc/nginx/sites-available/m2"
		 if [ -f "$file1" ]
		 	then
		 	sudo rm -f $file1
		 	echo "Deleteing the file now"
		 fi

		 #create new config based on user settings
NGINX_CONFIG='
upstream fastcgi_backend {
  server   unix:/var/run/php/php5.6-fpm.sock;
}

server {
	server_name '$HOST_NAME';
	return 301 $scheme://www.'$HOST_NAME'$request_uri;
}

server {
    server_name www.'$HOST_NAME';
    listen 80;

    #SSL Config - uncomment to enable
    #listen 443 ssl;
    #ssl_certificate /etc/nginx/ssl/nginx.crt;
    #ssl_certificate_key /etc/nginx/ssl/nginx.key;
    set $MAGE_ROOT '$MAGENTO_HOME';
    set $MAGE_MODE developer; # or production

    access_log '$INSTALL_DIR'/logs/access.log;
    error_log '$INSTALL_DIR'/logs/error.log;

    include '$MAGENTO_HOME'/nginx.conf.sample;
}'
		 echo "$NGINX_CONFIG" > ~/m2
		 SITES_DIR="/etc/nginx/sites-available/"
		 sudo mv -f ~/m2 $SITES_DIR
		 sudo ln -s $SITES_DIR'm2' /etc/nginx/sites-enabled/m2

	elif [ "$1" == 'apache' ]
	then
		sudo apt-get install -y apache2
APACHE_CONFIG=
'<VirtualHost *:80>

  DocumentRoot '$MAGENTO_HOME'

  <Directory '$MAGENTO_HOME'>
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    allow from all
  </Directory>

  ErrorLog '$INSTALL_DIR'/error.log
  LogLevel warn
  CustomLog '$INSTALL_DIR'/access.log combined

</VirtualHost>'
	sudo a2enmod rewrite
	sudo rm -f /etc/apache2/sites-enabled/000-default.conf

	# Add the Apache virtual host file
	echo "$APACHE_CONFIG" > ~/magento2.conf
	sudo mv -f ~/magento2.conf 	/etc/apache2/sites-enabled/magento2.conf

	elif [ -z "$1" ]
    	then
		red "FATAL ERROR: No Web server selected"
		exit 1
	else
		red "FATAL ERROR: Invalid Web server selected (valid choices: nginx or apache) - $1"
		exit 1
	fi
}

DisableSSL () {
	red 'Disableing SSL in database'
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '0' WHERE path IN ('web/secure/use_in_frontend');"
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '0' WHERE path IN ('web/secure/use_in_adminhtml');"
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '0' WHERE path IN ('web/secure/enable_upgrade_insecure');"
}

EnableSSL () {
	green 'Enabling SSL in database'
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '1' WHERE path IN ('web/secure/use_in_frontend');"
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '1' WHERE path IN ('web/secure/use_in_adminhtml');"
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = '1' WHERE path IN ('web/secure/enable_upgrade_insecure');"
}

Enviroment () {
	file="local"
	if [ -f "$file" ]
	then
		green "Using local configuration"
		cat local
	else
		red "Using defualt configuration no local file found"
		cat env
	fi
}

ComposerInstall () {
	green "Installing Composer"

	curl -sS https://getcomposer.org/installer | php
	sudo mv composer.phar /usr/local/bin/composer

	mkdir /home/$USER_NAME/.composer
	AUTH_JSON='
	{
	    "github-oauth": {
	        "github.com": "'$GITHUB_TOKEN'"
	   },
	    "http-basic": {
	        "repo.magento.com": {
	            "username": "'$AUTH_USER'",
	            "password": "'$AUTH_PASS'"
	        }
	    }
	}
	'
	echo "$AUTH_JSON" > /home/$USER_NAME/.composer/auth.json
}

MagentoInstall () {
	if [ "$1" == 'composer' ]
		then
		Mcomposer
	elif [ "$1" == 'git' ]
		then
		Mgit
	else
		red "[x] FATAL ERROR: Invalid install method (valid choices: git or composer) - $1"
		exit 1
	fi
}

Mgit () {
	red "Downloading MAgento Via GIT"
	if [ -d "$INSTALL_DIR"/public_html ]; then
		rm -rf "$INSTALL_DIR"/public_html
	else
		mkdir -p $INSTALL_DIR/{public_html,logs}
	fi

	cd "$INSTALL_DIR"
	git clone https://github.com/magento/magento2.git public_html
	cd "$MAGENTO_HOME"
	composer install
}

Mcomposer () {
	green 'Download Magento Via Composer'
	if [ -d "$INSTALL_DIR"/public_html ]; then
		rm -rf "$INSTALL_DIR"/public_html
		red 'Direcotry Existis REMOVING Now!'
	else
		mkdir -p $INSTALL_DIR/{public_html,logs}
		green "Creating Directories"
	fi
	cd "$INSTALL_DIR"
	green "Creating Composer Project"
	composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition public_html
}

Mcli() {
	green "Running Magento CLI Installer"
	cd $MAGENTO_HOME
	php bin/magento setup:install --base-url=$base_url \
	--db-host=$db_host \
	--db-name=$db_name \
	--db-user=$db_user \
	--db-password=$db_password \
	--admin-firstname=$admin_firstname \
	--admin-lastname=$admin_lastname \
	--admin-email=$admin_email 	\
	--admin-user=$admin_user \
	--admin-password=$admin_password \
	--backend-frontname=$admin_url \
	--language=$language \
	--currency=$currency \
	--timezone=$timezone \
	--use-rewrites=1
}

Permissions () {
	green "Setting Up Permissions For Magento"
	cd $MAGENTO_HOME
	sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \;
	sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \;
	sudo chown -R $USER_NAME:$USER_GROUP .
	sudo chmod u+x bin/magento
}

WebServerRestart () {
	green "Restarting " $1 " Webserver "
	if [ "$1" = 'nginx' ]; then
		sudo nginx -t
		sudo service nginx restart
	elif [ "$1" = 'apache' ]; then
		sudo service apache2 restart
		#sudo apache2ctl restart
	else
		red "[x] FATAL ERROR: Invalid web server selected for restart : $1"
		exit 1
	fi
}

SampleDataComposer () {
	green "Deploying Sample Data"
	cd "$INSTALL_DIR"/public_html/bin/
	php magento sampledata:deploy
}

MagentoDeveloperMode () {

	cd "$INSTALL_DIR"/public_html/bin/
	if [ "$1" = "1" ]
	then
		php magento deploy:mode:set developer
		php "$INSTALL_DIR"/public_html/bin/magento cache:disable
	php "$INSTALL_DIR"/public_html/bin/magento cache:flush
		yellow "Magento Developer Mode Enabled"
	else
		php magento deploy:mode:set production
		green "Magento Production Mode Enabled"
	fi
}


RestoreDatabase () {
	DB="$IMPORT_PATH"/restore/db
	latest_dump=$(ls -t $DB | head -1)
	db_file=$DB/$latest_dump
	green "Restoring Database From File: " $latest_dump
	mysql -u $db_user -p$db_password $db_name < $db_file
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = 'http://www.$HOST_NAME' WHERE path IN ('web/unsecure/base_url');"
	mysql -u $db_user -p$db_password -D $db_name -e "UPDATE core_config_data SET value = 'https://www.$HOST_NAME' WHERE path IN ('web/secure/base_url');"
	SetupUpgrade
}

RestoreMedia () {
	MEDIA="$IMPORT_PATH"/restore/media/
	latest_media=$(ls -t $MEDIA | head -1)
	tar -zxvf $MEDIA/$latest_media -C "$INSTALL_DIR"/public_html/pub/
}

MaintenanceMode () {
	cd "$INSTALL_DIR"/public_html/bin/
	if [ "$1" = "1" ]
	then
		php magento maintenance:enable
		red "maintenance mode ENABLED"
	else
		php magento maintenance:disable
		green "maintenance mode DISABLED"
	fi
}

CacheKiller() {
	php "$INSTALL_DIR"/public_html/bin/magento cache:disable
	php "$INSTALL_DIR"/public_html/bin/magento cache:flush
}

SetupUpgrade () {
	php "$INSTALL_DIR"/public_html/bin/magento setup:upgrade
}

##################
##   MAIN Loop  ##
##################

Logo

if [ "$1" == "bootstrap" ]
	then
	ServerUpdate
	AddUsers
	Database "$DATABASE_SOFTWARE"
	CreateDB
	PHPServer "$PHP_VERSION"
	WebServer "$WEB_SERVER"

elif [ "$1" == "enviroment" ]
	then
	Enviroment

elif [ "$1" == "install" ]
	then
	ComposerInstall
	MagentoInstall "$AUTO_INSTALL"
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"

elif [ "$1" == "install:git" ]
	then
	Mgit
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"

elif [ "$1" == "install:composer" ]
	then
	ComposerInstall
	Mcomposer
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"

elif [ "$1" == "install:sample" ]
	then
	SampleDataComposer

elif [ "$1" == "database:install" ]
	then
	Database "$DATABASE_SOFTWARE"
	CreateDB

elif [ "$1" == "restore:database" ]
	then
	MaintenanceMode '1'
	RestoreDatabase
	MaintenanceMode '0'

elif [ "$1" == "restore:media" ]
	then
	RestoreMedia

elif [ "$1" == "restore:apps" ]
	then
	Restore apps $2

elif [ "$1" == "restore:theme" ]
	then
	Restore theme $2

elif [ "$1" == "php:install" ]
	then
	PHPServer "$PHP_VERSION"

elif [ "$1" == "web:install" ]
	then
	WebServer "$WEB_SERVER"
	WebServerRestart "$WEB_SERVER"

elif [ "$1" == "ssl:disable" ]
	then
	DisableSSL

elif [ "$1" == "ssl:enable" ]
  then
  EnableSSL

elif [ "$1" == "mode:developer" ]
	then
	MagentoDeveloperMode '1'

elif [ "$1" == "mode:production" ]
	then
	MagentoDeveloperMode '0'

elif [ -z "$1" ]
	then
	Usage
	exit 1
else
	Usage
	exit 1
fi
