#!/usr/bin/env bash

set -x 

IMPORT_PATH="/home/vagrant/scripts"

#################################
## IMPORT ENVIROMENT VARIABLES ##
#################################


if [ -f "$IMPORT_PATH"/local ]
then
	. "$IMPORT_PATH"/local
	echo "Using local configuration"
else
	. "$IMPORT_PATH"/env
	echo "Using defualt configuration no local enviroment file found"
fi

##########################
## IMPORT SERVER CONFIG ##
##########################

. "$IMPORT_PATH"/config

###############
## FUNCTIONS ##
###############

Logo () { 
cat << "EOF" 


                             ___.                 
  _____ _____     ____   ____\_ |__   _______  ___
 /     \\__  \   / ___\_/ __ \| __ \ /  _ \  \/  /
|  Y Y  \/ __ \_/ /_/  >  ___/| \_\ (  <_> >    < 
|__|_|  (____  /\___  / \___  >___  /\____/__/\_ \
      \/     \//_____/      \/    \/            \/


EOF
}

# Create error logs
ErrorLogCreate() { 
if [ ! -f "$ERR_LOG" ]
	then
	touch "$ERR_LOG"
	sudo chown vagrant:www-data "$ERR_LOG"
fi
}

# Database Functions
Database () { 
if [ "$1" == 'mysql' ]
    then
    # Install MySQL 5.6
    export DEBIAN_FRONTEND=noninteractive
	sudo apt-get install mysql-client-5.6
	sudo -E apt-get -q -y install mysql-server-5.6
elif [ "$1" == 'percona' ]
    then
    wget https://repo.percona.com/apt/percona-release_0.1-3.$(lsb_release -sc)_all.deb
    dpkg -i percona-release_0.1-3.$(lsb_release -sc)_all.deb
    sudo apt-get update
    sudo apt-get install -y percona-server-server-5.6
elif [ "$1" == 'mariadb' ]
    then
    sudo apt-get install -y mariadb-server        
elif [ -z "$1" ]
    then
	echo "[x] FATAL ERROR: No database software selected" > $ERR_LOG
	exit 1
else
	echo "[x] FATAL ERROR: Invalid database software selected (valid choices: mysql, percona & mariadb) - $1" > $ERR_LOG
	exit 1
fi
}

CreateDB () { 
	echo '#####################'
	echo '## CREATE DATABASE ##'
	echo '#####################'
	Q1="CREATE DATABASE IF NOT EXISTS $DATABASE_NAME;"
	Q2="GRANT ALL ON "$DATABASE_NAME".* TO '$DATABASE_USER'@'localhost' IDENTIFIED BY '$DATABASE_PASS';"
	Q3="FLUSH PRIVILEGES;"
	SQL="$Q1 $Q2 $Q3"
	mysql -u root -e "$SQL"
}

# PHP Functions
PHPServer () { 
	echo '#########'
	echo '## PHP ##'
	echo '#########'
	if [ "$1" == "5" ]
	then
		# Install PHP 5.6 FPM
		sudo add-apt-repository ppa:ondrej/php
		sudo apt-get install python-software-properties
		sudo apt-get update && sudo apt-get -y upgrade
		sudo apt-get -y install php5.6-fpm php5.6-cli php5.6-gd php-imagick php5.6-mysql php5.6-mcrypt php-pear php5.6-curl php5.6-intl php5.6-gd php5.6-xsl php5.6-mbstring php5.6-mcrypt php5.6-zip
		
		#php.ini settings - memory
		phpmemory_limit=1024M
		PHP_TIME=$timezone
		sudo sed -i 's/memory_limit = .*/memory_limit = '${phpmemory_limit}'/' /etc/php/5.6/cli/php.ini
		
		#php.in settings - always_populate_raw_post_data
		sudo sed -i 's/always_populate_raw_post_data = /always_populate_raw_post_data = -1/' /etc/php/5.6/cli/php.ini
		
		#php.ini settings - time
		sudo bash -c "cat /etc/php/5.6/cli/php.ini >> $PHP_TIME"

		#copy CLi php.ini to FPM
		sudo cp /etc/php/5.6/cli/php.ini /etc/php/5.6/fpm/php.ini
		
		# PHP Mcrypt
		sudo ln -s /etc/php/5.6/conf.d/mcrypt.ini /etc/php/5.6/mods-available/mcrypt.ini
		sudo php5enmod mcrypt
		sudo service php5.6-fpm restart


	elif [ "$1" == "7" ]
		then
		#TODO: add/test PHP7
		echo "PHP7 not avaliable yet"	
	elif [ -z "$1" ]
    	then
		echo "[x] FATAL ERROR: No PHP server selected" > $ERR_LOG
		exit 1
	else
		echo "[x] FATAL ERROR: Invalid PHP server selected (valid choices: 5 or 6) - your selection = $1" > $ERR_LOG
		exit 1	
	fi
} 

# Web Server Functions

WebServer () { 
	echo '########################'
	echo '## WEB SERVER INSTALL ##'
	echo '########################'
	if [ "$1" = "nginx" ]
	then
		sudo apt-get -y install nginx
		#Remove existing configs
		file1="/etc/nginx/sites-available/m2"
		 if [ -f "$file1" ]
		 	then
		 	sudo rm -f $file1
		 	echo "Deleteing the file now"
		 fi
		file2="/etc/nginx/sites-enabled/m2"
		 if [ -f "$file2" ]
		 	then
		 	sudo rm -f $file2
		 	echo "Deleteing the file now"
		 fi
		 #create new config based on user settings
NGINX_CONFIG='
upstream fastcgi_backend {
  server   unix:/var/run/php/php5.6-fpm.sock;
}

server {
    server_name '$HOST_NAME' www.'$HOST_NAME';
    listen 80;
    set $MAGE_ROOT '$MAGENTO_HOME';
    set $MAGE_MODE developer; # or production

    access_log '$INSTALL_DIR'/logs/access.log;
    error_log '$INSTALL_DIR'/logs/error.log;

    include '$MAGENTO_HOME'/nginx.conf.sample;        
}'
		 echo "$NGINX_CONFIG" > ~/m2
		 SITES_DIR="/etc/nginx/sites-available/"
		 sudo mv -f ~/m2 $SITES_DIR
		 sudo ln -s $SITES_DIR'm2' /etc/nginx/sites-enabled/m2
		 	
	elif [ "$1" == 'apache' ]
	then
		sudo apt-get install -y apache2
APACHE_CONFIG=
'<VirtualHost *:80>

  DocumentRoot '$MAGENTO_HOME'

  <Directory '$MAGENTO_HOME'>
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    allow from all
  </Directory>

  ErrorLog '$INSTALL_DIR'/error.log
  LogLevel warn
  CustomLog '$INSTALL_DIR'/access.log combined

</VirtualHost>'
	sudo a2enmod rewrite
	sudo rm -f /etc/apache2/sites-enabled/000-default.conf

	# Add the Apache virtual host file
	echo "$APACHE_CONFIG" > ~/magento2.conf
	sudo mv -f ~/magento2.conf 	/etc/apache2/sites-enabled/magento2.conf
		
	elif [ -z "$1" ]
    	then
		echo "[x] FATAL ERROR: No Web server selected" > $ERR_LOG
		exit 1
	else
		echo "[x] FATAL ERROR: Invalid Web server selected (valid choices: nginx or apache) - $1" > $ERR_LOG
		exit 1	
	fi
}



ServerUpdate () { 
	# Update the system
	sudo apt-get -y update && apt-get -y upgrade

	# Install basics
	sudo apt-get -y install software-properties-common curl nano vim git zip
}

AddUsers () {
	echo '###########'
	echo '## USERS ##'
	echo '###########'
	sudo useradd -g www-data www-data
	sudo usermod -g www-data vagrant
}

Enviroment () {
	file="local"
	if [ -f "$file" ]
	then
		echo "Using local configuration"
		cat local
	else
		echo "Using defualt configuration no local file found"
		cat env
	fi
}

ComposerInstall () {
	echo '##############'
	echo '## COMPOSER ##'
	echo '##############'

	curl -sS https://getcomposer.org/installer | php
	sudo mv composer.phar /usr/local/bin/composer

	mkdir /home/vagrant/.composer
	AUTH_JSON='
	{
	    "github-oauth": {
	        "github.com": "'$GITHUB_TOKEN'"
	   },
	    "http-basic": {
	        "repo.magento.com": {
	            "username": "'$AUTH_USER'",
	            "password": "'$AUTH_PASS'"
	        }
	    }
	}
	'
	echo "$AUTH_JSON" > /home/vagrant/.composer/auth.json
}

MagentoInstall () { 
	if [ "$1" == 'composer' ] 
		then
		Mcomposer
	elif [ "$1" == 'git' ] 
		then
		Mgit
	else
		echo "[x] FATAL ERROR: Invalid install method (valid choices: git or composer) - $1" > $ERR_LOG
		exit 1
	fi
}

Mgit () {
	echo '######################'
	echo '## DOWNLOAD MAGENTO ##'
	echo '######################'

	mkdir -p $INSTALL_DIR/{public_html,logs}
	cd "$INSTALL_DIR"
	git clone https://github.com/magento/magento2.git public_html
	cd "$MAGENTO_HOME"
	composer install
}

Mcomposer () {
	echo '######################'
	echo '## DOWNLOAD MAGENTO ##'
	echo '######################'
	mkdir -p "$INSTALL_DIR"/{public_html,logs}
	cd "$INSTALL_DIR"
	composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition public_html
}

Mcli() {

	echo '#########################'
	echo '## CLI INSTALL MAGENTO ##'
	echo '#########################'

	cd $MAGENTO_HOME
	php bin/magento setup:install --base-url=$base_url \
	--db-host=$db_host \
	--db-name=$db_name \
	--db-user=$db_name \
	--db-password=$db_password \
	--admin-firstname=$admin_firstname \
	--admin-lastname=$admin_lastname \
	--admin-email=$admin_email 	\
	--admin-user=$admin_user \
	--admin-password=$admin_password \
	--backend-frontname=$admin_url \
	--language=$language \
	--currency=$currency \
	--timezone=$timezone \
	--use-rewrites=1
}

Permissions () {
	echo '#####################'
	echo '## SET PERMISSIONS ##'
	echo '#####################'

	cd $MAGENTO_HOME
	sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \;
	sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \;
	sudo chown -R vagrant:www-data .
	sudo chmod u+x bin/magento
}

WebServerRestart () {
	echo '#########################'
	echo '## RESTART/TEST SERVER ##'
	echo '#########################'
	if [ "$1" = 'nginx' ]; then 
		sudo nginx -t
		sudo service nginx restart
	elif [ "$1" = 'apache' ]; then
		sudo service apache2 restart
		#sudo apache2ctl restart
	else
		echo "[x] FATAL ERROR: Invalid web server selected for restart : $1" > $ERR_LOG
		exit 1
	fi
}

Usage () {
cat << "EOF"
Available commands:

GENRAL
magebox bootstrap			Install all required software (PHP, Apache/Nginx, Mysql, etc..)
magebox help				Shows commands avaliable
magebox enviroment  			Shows current enviroment variables

MAGENTO2 INSTALL
magebox install				Install Magento2 based on enviroment settings
magebox install:git			Install Magento2 with git
magebox install:composer		Install Magento2 with Composer

DATABASE
magebox database:install 		Install database from config settings

PHP SERVER
magebox php:install			Install PHP server from config settings

WEB SERVER
magebox web:install 			Install web server from config settings

	
EOF
}

##################
## MAIN PROGRAM ##
##################

Logo

if [ "$1" == "bootstrap" ] 
	then
	ErrorLogCreate
	ServerUpdate
	AddUsers
	Database "$DATABASE_SOFTWARE"
	CreateDB
	PHPServer "$PHP_VERSION"
	WebServer "$WEB_SERVER"
elif [ "$1" == "enviroment" ] 
	then
	Enviroment
elif [ "$1" == "install" ] 
	then
	ComposerInstall
	MagentoInstall "$AUTO_INSTALL"
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"
elif [ "$1" == "install:git" ] 
	then
	ComposerInstall
	Mgit
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"
elif [ "$1" == "install:composer" ] 
	then
	ComposerInstall
	Mcomposer
	Mcli
	Permissions
	WebServerRestart "$WEB_SERVER"
elif [ "$1" == "database:install" ] 
	then
	Database "$DATABASE_SOFTWARE"
	CreateDB
elif [ "$1" == "php:install" ] 
	then
	PHPServer "$PHP_VERSION"
elif [ "$1" == "web:install" ] 
	then
	WebServer "$WEB_SERVER"
	WebServerRestart "$WEB_SERVER"
elif [ -z "$1" ]
	then
	Usage
	exit 1
else
	Usage
	exit 1	
fi

